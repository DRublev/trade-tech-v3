// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: shares.proto

package contracts_shares

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shares_GetShares_FullMethodName           = "/shares.Shares/GetShares"
	Shares_GetTradingSchedules_FullMethodName = "/shares.Shares/GetTradingSchedules"
)

// SharesClient is the client API for Shares service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharesClient interface {
	GetShares(ctx context.Context, in *GetInstrumentsRequest, opts ...grpc.CallOption) (*GetSharesResponse, error)
	GetTradingSchedules(ctx context.Context, in *GetTradingSchedulesRequest, opts ...grpc.CallOption) (*GetTradingSchedulesResponse, error)
}

type sharesClient struct {
	cc grpc.ClientConnInterface
}

func NewSharesClient(cc grpc.ClientConnInterface) SharesClient {
	return &sharesClient{cc}
}

func (c *sharesClient) GetShares(ctx context.Context, in *GetInstrumentsRequest, opts ...grpc.CallOption) (*GetSharesResponse, error) {
	out := new(GetSharesResponse)
	err := c.cc.Invoke(ctx, Shares_GetShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesClient) GetTradingSchedules(ctx context.Context, in *GetTradingSchedulesRequest, opts ...grpc.CallOption) (*GetTradingSchedulesResponse, error) {
	out := new(GetTradingSchedulesResponse)
	err := c.cc.Invoke(ctx, Shares_GetTradingSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharesServer is the server API for Shares service.
// All implementations must embed UnimplementedSharesServer
// for forward compatibility
type SharesServer interface {
	GetShares(context.Context, *GetInstrumentsRequest) (*GetSharesResponse, error)
	GetTradingSchedules(context.Context, *GetTradingSchedulesRequest) (*GetTradingSchedulesResponse, error)
	mustEmbedUnimplementedSharesServer()
}

// UnimplementedSharesServer must be embedded to have forward compatible implementations.
type UnimplementedSharesServer struct {
}

func (UnimplementedSharesServer) GetShares(context.Context, *GetInstrumentsRequest) (*GetSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShares not implemented")
}
func (UnimplementedSharesServer) GetTradingSchedules(context.Context, *GetTradingSchedulesRequest) (*GetTradingSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradingSchedules not implemented")
}
func (UnimplementedSharesServer) mustEmbedUnimplementedSharesServer() {}

// UnsafeSharesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharesServer will
// result in compilation errors.
type UnsafeSharesServer interface {
	mustEmbedUnimplementedSharesServer()
}

func RegisterSharesServer(s grpc.ServiceRegistrar, srv SharesServer) {
	s.RegisterService(&Shares_ServiceDesc, srv)
}

func _Shares_GetShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shares_GetShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetShares(ctx, req.(*GetInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shares_GetTradingSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradingSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServer).GetTradingSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shares_GetTradingSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServer).GetTradingSchedules(ctx, req.(*GetTradingSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shares_ServiceDesc is the grpc.ServiceDesc for Shares service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shares_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shares.Shares",
	HandlerType: (*SharesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShares",
			Handler:    _Shares_GetShares_Handler,
		},
		{
			MethodName: "GetTradingSchedules",
			Handler:    _Shares_GetTradingSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shares.proto",
}
