syntax = "proto3";

package marketData;

// Название пакета для go
option go_package = "grpcGW.marketdata";

import "google/protobuf/timestamp.proto";

service MarketData {
    // Название нашего эндпоинта
    rpc GetCandles(GetCandlesRequest) returns (GetCandlesResponse);
    rpc SubscribeCandles(SubscribeCandlesRequest) returns (stream OHLC);
    rpc SubscribeOrders(SubscribeOrderRequest) returns (stream OrderState);
    rpc SubscribeOrderbook(SubscribeOrderbookRequest) returns (stream Orderbook);
}

message OrderState {
    string IdempodentID = 1;
    int32 ExecutionStatus = 2;
    int32 OperationType = 3;
    int32 LotsRequested = 4;
    int32 LotsExecuted = 5;
    double PricePerLot = 6;
    google.protobuf.Timestamp time = 7;
    string InstrumentID = 8;
    string Strategy = 9;
}

message SubscribeOrderRequest {
}



// Что ждем от клиента
message GetCandlesRequest {
    string instrumentId = 1;
    int32 interval = 2;
    google.protobuf.Timestamp start = 3; 
    google.protobuf.Timestamp end = 4;
}

message Quant { 
    int32 units = 1;
    int32 nano = 2;
}

message OHLC {
        Quant open = 1;
        Quant high = 2;
        Quant low = 3;
        Quant close = 4;
        int64 volume = 5;
        google.protobuf.Timestamp time = 6;
    }

// Что хотим вернуть
message GetCandlesResponse {
    repeated OHLC candles = 1;
}

message SubscribeCandlesRequest {
    string instrumentId = 1;
    int32 interval = 2;
}

message BidAsk {
    Quant price = 1;
    int64 quantity = 2;
}

message Orderbook {
    string instrumentId = 1;
    int32 depth = 2;
    google.protobuf.Timestamp time = 3;
    Quant limitUp = 4;
    Quant limitDown = 5;
    repeated BidAsk bids = 6;
    repeated BidAsk asks = 7;
}

message SubscribeOrderbookRequest {
    string instrumentId = 1;
    int32 depth = 2;
}
