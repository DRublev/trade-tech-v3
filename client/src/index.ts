import { app, BrowserWindow, utilityProcess, dialog, MessageBoxOptions, ipcMain } from 'electron';
import { getShares } from './node/ipcHandlers/instruments';
import logger from './logger';
import { autoUpdater, UpdateDownloadedEvent } from 'electron-updater';
import './node/ipcHandlers';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;




const server = 'https://github.com/DRublev/trade-tech-v3';
const url = `${server}/releases/${app.getVersion()}`;

autoUpdater.setFeedURL(url)

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
const instrumentBaseState = 1
const fetchSharesList = async () => {
  try {
    await getShares({ instrumentStatus: instrumentBaseState });
  }
  catch (error) { logger.error('Fetching shares list error', error) }
}

let mainWindow: BrowserWindow;
const createWindow = (): void => {
  // TODO: Подумать над тем, чтобы вынести общение с сервером (стриминговые запросы) в воркер или отдельное спрятанное окно
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,

      nodeIntegrationInWorker: true,
      // Use pluginOptions.nodeIntegration, leave this alone
      // See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info
      nodeIntegration: !!process.env.ELECTRON_NODE_INTEGRATION,
      contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }

  // mainWindow.webContents.on('will-navigate', (event, url) => {
  //   event.preventDefault();
  //   shell.openExternal(url);
  // });
};


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  autoUpdater.checkForUpdates();

  if (process.env.ENV === 'PROD' || app.isPackaged) {
    const goLaunchProcess = utilityProcess.fork('src/launchGoServer.js', [app.isPackaged ? '--packaged' : '']);
    goLaunchProcess.once('spawn', () => {
      logger.info('go server starting');
    });
    goLaunchProcess.once('message', m => {
      if (m === 'OK') {
        createWindow();
      }
    });
    goLaunchProcess.on('exit', (code) => {
      logger.info(`go server exited with code ${code}`)
    })
  } else {
    createWindow();
  }
  fetchSharesList();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.handle('RESIZE', (e, req) => {
  // eslint-disable-next-line prefer-const
  let { width, height } = req;

  if (mainWindow.webContents.devToolsWebContents) {
    width += 300;
  }

  mainWindow.setSize(width, height);
  mainWindow.center();
})

autoUpdater.on('update-downloaded', (event: UpdateDownloadedEvent) => {
  const { releaseNotes, releaseName } = event;
  const dialogOpts: MessageBoxOptions = {
    type: 'info',
    buttons: ['Перезапустить', 'Позже'],
    title: 'Приложение обновлено',
    message: [...releaseNotes].map(String).join('\n'),
    detail: 'Новая версия приложения была загружена. Перезапустить приложение для применения обновления?',
  }

  dialog.showMessageBox(null, dialogOpts).then((returnValue) => {
    if (returnValue.response === 0) autoUpdater.quitAndInstall();
  });
});




// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
